=========================================
Type Synonym Declarations
=========================================

type Foo = Bar
type List = []
type Foo a = Bar a
type Rec a = [Circ a]

---

(program
  (type_synonym
    (simple_type (constructor_identifier))
    (constructor_identifier))
  (type_synonym
    (simple_type (constructor_identifier))
    (constructor_identifier))
  (type_synonym
    (simple_type (constructor_identifier) (variable_identifier))
    (constructor_identifier) (variable_identifier))
  (type_synonym
    (simple_type (constructor_identifier) (variable_identifier))
    (constructor_identifier)))

=========================================
New Type Declarations
=========================================

newtype N = N Int
newtype N = N a
newtype Age = Age { unAge :: Int }

---

(program
  (newtype
    (simple_type (constructor_identifier))
    (new_constructor (constructor_identifier) (constructor_identifier)))
  (newtype
    (simple_type (constructor_identifier))
    (new_constructor (constructor_identifier) (variable_identifier)))
  (newtype
    (simple_type (constructor_identifier))
    (new_constructor
      (constructor_identifier)
      (fields
        (field (variable_identifier) (constructor_identifier))))))

=========================================
Algebraic Datatype Declarations
=========================================

data N
data N = N
data N = N { a :: Int }
data N = N { a, b :: Int }
data N = N { a :: Int, b :: Int }

---

(program
  (algebraic_datatype (simple_type (constructor_identifier)))
  (algebraic_datatype
    (simple_type (constructor_identifier))
    (constructors (constructor_identifier)))
  (algebraic_datatype
    (simple_type (constructor_identifier))
    (constructors
      (constructor_identifier)
      (fields (field (variable_identifier) (constructor_identifier)))))
  (algebraic_datatype
    (simple_type (constructor_identifier))
    (constructors
      (constructor_identifier)
      (fields (field (variable_identifier) (variable_identifier) (constructor_identifier)))))
  (algebraic_datatype
    (simple_type (constructor_identifier))
    (constructors
      (constructor_identifier)
      (fields
        (field (variable_identifier) (constructor_identifier))
        (field (variable_identifier) (constructor_identifier))))))
